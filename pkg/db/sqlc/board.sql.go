// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: board.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createBoard = `-- name: CreateBoard :one
INSERT INTO boards (
  id, project_name, picture, owner_id, created_at
) VALUES ($1, $2, $3, $4, $5)
RETURNING id, project_name, picture, owner_id, created_at
`

type CreateBoardParams struct {
	ID          string         `json:"id"`
	ProjectName string         `json:"project_name"`
	Picture     sql.NullString `json:"picture"`
	OwnerID     string         `json:"owner_id"`
	CreatedAt   time.Time      `json:"created_at"`
}

func (q *Queries) CreateBoard(ctx context.Context, arg CreateBoardParams) (Board, error) {
	row := q.db.QueryRowContext(ctx, createBoard,
		arg.ID,
		arg.ProjectName,
		arg.Picture,
		arg.OwnerID,
		arg.CreatedAt,
	)
	var i Board
	err := row.Scan(
		&i.ID,
		&i.ProjectName,
		&i.Picture,
		&i.OwnerID,
		&i.CreatedAt,
	)
	return i, err
}

const getBoardByOwnerID = `-- name: GetBoardByOwnerID :one
SELECT id, project_name, picture, owner_id, created_at FROM boards
WHERE owner_id = $1 LIMIT 1
`

func (q *Queries) GetBoardByOwnerID(ctx context.Context, ownerID string) (Board, error) {
	row := q.db.QueryRowContext(ctx, getBoardByOwnerID, ownerID)
	var i Board
	err := row.Scan(
		&i.ID,
		&i.ProjectName,
		&i.Picture,
		&i.OwnerID,
		&i.CreatedAt,
	)
	return i, err
}
