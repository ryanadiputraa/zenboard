// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: task.sql

package db

import (
	"context"
)

const initTaskStatus = `-- name: InitTaskStatus :many
INSERT INTO task_status (
  id, "order", name, board_id
) VALUES
  ($2, $3, $4, $1),
  ($5, $6, $7, $1),
  ($8, $9, $10, $1)
RETURNING id, "order", name, board_id
`

type InitTaskStatusParams struct {
	BoardID string `json:"board_id"`
	ID      string `json:"id"`
	Order   int32  `json:"order"`
	Name    string `json:"name"`
	ID_2    string `json:"id_2"`
	Order_2 int32  `json:"order_2"`
	Name_2  string `json:"name_2"`
	ID_3    string `json:"id_3"`
	Order_3 int32  `json:"order_3"`
	Name_3  string `json:"name_3"`
}

func (q *Queries) InitTaskStatus(ctx context.Context, arg InitTaskStatusParams) ([]TaskStatus, error) {
	rows, err := q.db.QueryContext(ctx, initTaskStatus,
		arg.BoardID,
		arg.ID,
		arg.Order,
		arg.Name,
		arg.ID_2,
		arg.Order_2,
		arg.Name_2,
		arg.ID_3,
		arg.Order_3,
		arg.Name_3,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TaskStatus{}
	for rows.Next() {
		var i TaskStatus
		if err := rows.Scan(
			&i.ID,
			&i.Order,
			&i.Name,
			&i.BoardID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
